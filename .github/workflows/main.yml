name: build-and-deploy

on:
  push:
    branches: [ "main" ]
    tags: [ "*" ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: salvatierraj/gestura-back   
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Docker meta (tags/labels automáticos)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,format=short
            type=ref,event=tag

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}    
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}  


      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          authkey: ${{ secrets.TS_AUTHKEY }}

      - name: Deploy via Tailscale SSH
        env:
          SSH_HOST: ubuntu-ci.tail60ceb7.ts.net   
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -e
          # Requiere que en el server tengas 'tailscale up --ssh'
          # y que la policy de Access Controls permita SSH desde este runner.

          # Usamos 'tailscale ssh' (no llaves) para ejecutar un script remoto.
          # Si prefieres OpenSSH con llaves, cambia por 'ssh' y añade key.
          tailscale ssh deploy@"$SSH_HOST" 'bash -s' <<EOF
          set -e
          APP_DIR=/opt/tu-app
          mkdir -p "\$APP_DIR"
          cd "\$APP_DIR"

          # Login a Docker Hub en el servidor con password-stdin
          echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

          docker compose pull
          docker compose up -d --remove-orphans
          docker image prune -f
          EOF
